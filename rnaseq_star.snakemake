###
# Corre G. @ GENETHON
# RNAseq alignment and counting
# Alignment with STAR

#### WORKFLOW

# snakemake -s /home/marine/RNASeq/Pipelines/rnaseq_star.snakemake -k -j 12  --use-conda --conda-prefix  /home/marine/RNASeq/Conda_env --conda-frontend mamba
## RNASEQ folder
#    | pipelines
#       - rnaseq_star.snakemake   -> the workflow
#       - rnaseq_star.yaml        -> the environment conda file
#       - rnaseq_star_config.yaml -> template for configuration file (copy in each analysis folder)
#    | conda_env                    --> where snakemake will create the conda environment. Use this path in the snakemake command argument "--conda-prefix"
#    | folder 1
#       - R1.fastq.gz
#       - R2.fastq.gz
#       - rnaseq_star_config.yaml  --> file with path to reference genome and annotation GTF file
#    | folder 2
#       - R1.fastq.gz
#       - R2.fastq.gz
#       - rnaseq_star_config.yaml  --> file with path to reference genome and annotation GTF file

configfile: "rnaseq_star_config.yaml"

STARindex=config["STARindex"]
ANNOT=config["ANNOT"]

import os;
import re;
from glob import glob;

FILES = glob("*R1*.fastq.gz")
SAMPLES = [re.sub('_R[0-9].+$','',w) for w in FILES];
print(SAMPLES);

def getr1(wildcards):
  return glob(wildcards.NAME +"_R1*.fastq.gz")

def getr2(wildcards):
  return glob(wildcards.NAME + "_R2*.fastq.gz")



rule all:
  input: expand("{sample}/FeatureCount/{sample}_counts.txt",sample=SAMPLES)



rule genome_mapping:
        input : r1=getr1, r2=getr2, idx = STARindex
        output : mapped="{NAME}/RefAlign/{NAME}_genomeAligned.out.bam"
        threads : 12
        log : "{NAME}/RefAlign/logs/{NAME}_genome_alignment.log"
        conda : "rnaseq_star.yaml"
        shell : """
                
                mkdir -p /tmp/STAR/
                [[ -d /tmp/STAR/{wildcards.NAME} ]] && rm -r /tmp/STAR/{wildcards.NAME}
                STAR --runMode alignReads --runThreadN {threads} --outTmpDir /tmp/STAR/{wildcards.NAME} --readFilesCommand zcat --genomeLoad NoSharedMemory --genomeDir {input.idx}  --outSAMattributes All --outSAMtype BAM Unsorted --outSAMmultNmax 5 --outFileNamePrefix {wildcards.NAME}/RefAlign/{wildcards.NAME}_genome --readFilesIn {input.r1} {input.r2} > {log}
                """

rule sort:
        input : rules.genome_mapping.output.mapped
        output : "{NAME}/RefAlign/{NAME}_genomeAligned.out.sorted.bam"
        threads : 12
        conda : "rnaseq_star.yaml"
        shell : """
                samtools sort -@ {threads} {input} > {output}
                """




rule feature_count:
        input : rules.sort.output
        output : "{NAME}/FeatureCount/{NAME}_counts.txt"
        threads : 12
        conda : "rnaseq_star.yaml"
        log : "{NAME}/FeatureCount/{NAME}_FeatureCount.log"
        shell :  """
                featureCounts -a {ANNOT} -p -B -s 0 -o {output} {input} -C --primary --extraAttributes gene_name -J -T {threads} --tmpDir /tmp/STAR 2> {log}
                """


rule fastqc:
        input: r1=getr1, r2=getr2
        output : r1= "{NAME}/{NAME}_R1_fastqc.zip", r2="{NAME}/{NAME}_R2_fastqc.zip"
        threads : 8
        conda : "rnaseq_star.yaml"
        shell : """
                fastqc -t {threads} {input}
                """
